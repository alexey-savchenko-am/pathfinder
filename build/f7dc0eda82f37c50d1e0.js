import{makeMoveCommand,makeSelectTileCommand}from"./commands.js";export const LEFT="LEFT";export const RIGHT="RIGHT";export const UP="UP";export const DOWN="DOWN";export class InputHandler{constructor(e){this._mouseState={isLeftPressed:!1,isRightPressed:!1,coordinates:{x:0,y:0}},this._keyState={LEFT:!1,RIGHT:!1,UP:!1,DOWN:!1},this._canvas=e,this.handleMouseDown=this.handleMouseDown.bind(this),this.handleMouseUp=this.handleMouseUp.bind(this),this.updateKeysState=this.updateKeysState.bind(this),this._canvas.addEventListener("mousedown",this.handleMouseDown),this._canvas.addEventListener("mouseup",this.handleMouseUp),document.addEventListener("keydown",this.updateKeysState),document.addEventListener("keyup",this.updateKeysState)}updateKeysState(e){switch(e.code){case"KeyA":case"ArrowLeft":this._keyState[LEFT]="keydown"===e.type;break;case"KeyW":case"ArrowUp":this._keyState[UP]="keydown"===e.type;break;case"KeyD":case"ArrowRight":this._keyState[RIGHT]="keydown"===e.type;break;case"KeyS":case"ArrowDown":this._keyState[DOWN]="keydown"===e.type;break;default:this._keyState[e.code]="keydown"===e.type}}handleMouseDown(e){0===e.button?this._mouseState.isLeftPressed=!0:2===e.button&&(this._mouseState.isRightPressed=!0),this.updateMouseCoordinates(e)}handleMouseUp(e){(0===e.button||2===e.button)&&(this._mouseState.isLeftPressed=!1),this.updateMouseCoordinates(e)}handle(e){}isPressed(e){return this._keyState[e]}updateMouseCoordinates(e){const t=this._canvas.getBoundingClientRect(),s=Math.floor(e.x-t.left),o=Math.floor(e.y-t.top);this._mouseState.coordinates={x:s,y:o}}}